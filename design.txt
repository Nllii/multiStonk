L0:
handle multiple trading accounts locally (one local account per algorithm)
a single alpaca account
identical interface to the alpaca api for all calls. Should be fairly easy to drag and drop new algos

L1:
per algorithm account:
  trade history
  account info
  currently held positions
  easy init of common functions (that should be tailored to each algo)
  trade on alpaca
  

globally:
  deny trading if buying/selling the same stock as another algo on the same day (prevent actual day trading)
  catch errors in the event one of the algos fails
  should auto start on boot
  should attempt to restart a failed algo some number of times before keeping it off
  


L2:
per algorithm account:
  file containing the algorithm itself
  file containing functions specific to that alogorithm only (this should NOT use any direct alpaca trading API calls (time/calendar/etc should be okay)
  all trade API calls should be routed through the common functions with a parameter 

common functions:
  trade history
  account info (equity/portfolio values, cash, etc)
  




L3:





globally:
  unallocated stocks should be set into a "misc" account where they can be sold off under a different set of rules
  should rate limit algorithms to avoid hittimg the 200 calls/min limit



misc carryover problems that need to be addressed:
  need a master/slave setup (preferably over the internet)
  need to fix the limit order type in the createOrder function


notional file/folder structure:

/-+
  +-+ algo1
  | +- algo1.py
  | +- algo1fxns.py
  | +-+ algo1hist
  |   +- date.json
  | +- algo1info.json
  | +- algo1.conf
  |
  +-+ algo2
  | +...
  |
  +-+ common
  | +- alpacafxns.py
  | +- otherfxns.py
  | +- newsScrape.py
  | +- common.conf
  | +- common.py
  |
  +- multiStonk.py


file/folder descriptions:
algo1.py      contains the actual algorithm to run as its own thread(s) for algo 1
algo1fxns.py  contains the functions that are used SOLELY by algo1
algo1hist     contains the trade history files of algo1 on a per-month basis
algo1info.py  contains the current account info of algo1
algo1.conf    contains configuration info for algo1

common.py     contains wrapper functions for alpacafxns and otherfxns to be called by the algorithms. Should provide rate limiting and data recording (e.g. history)
alpacafxns.py contains functions that interface with the alpaca api (should NOT be called directly by the algorithms, should be passed through common.py)
otherfxns.py  contains functions that do not interface with the alpaca api
newsScrape.py contains news scraping functions
common.conf   contains configuration settings that should be applied across all algorithms

multiStonk.py contains calls to the algos to start each one as its own thread and prodive error reporting and statuses